using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;

namespace UnityAttributes.Singleton;

[Generator]
public sealed class SingletonGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var classes = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{SingletonAttribute.AttributeFullName}.g", SingletonAttribute.AttributeText));
        
        context.RegisterSourceOutput(classes, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is ClassDeclarationSyntax;
    }
    
    private static List<ClassToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax) ctx.Node;

        var classDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax, token);
        if (classDeclarationSymbol is not ITypeSymbol classDeclarationTypeSymbol)
        {
            return [];
        }

        var classNamespace = classDeclarationTypeSymbol.GetNamespace();
        if (!classDeclarationSyntax.HaveAttribute(SingletonAttribute.AttributeName))
        {
            return [];
        }

        if (!classDeclarationSyntax.HaveAttributeWithArguments(SingletonAttribute.AttributeName, out var args))
        {
            return [];
        }
        
        var arguments = args.Arguments;
        if (arguments.Count == 0)
        {
            return [];
        }

        if (arguments[0].Expression is not LiteralExpressionSyntax literalExpressionSyntax)
        {
            return [];
        }

        var methodName = literalExpressionSyntax.Token.Text.Trim('"');
        return [new ClassToProcess(classDeclarationTypeSymbol, classNamespace, methodName)];
    }

    private static void GenerateCode(SourceProductionContext context, ClassToProcess classToProcess)
    {
        var code = GenerateCode(classToProcess);
        context.AddSource($"{classToProcess.ClassSymbol.ToDisplayString()}_singleton.g",
            SourceText.From(code, Encoding.UTF8));
    }

    private static string GenerateCode(ClassToProcess classToProcess)
    {
        var builder = new CodeBuilder();
        
        builder.AppendLineWithIdent("/// <auto-generated />");
        
        using (new NamespaceBlock(builder, classToProcess.ClassSymbol))
        {
            builder.AppendLineWithIdent("using UnityEngine;");
            builder.AppendLine();
            builder.AppendIdent().Append("public partial class ").Append(classToProcess.ClassSymbol.Name)
                .Append(" : MonoBehaviour").AppendLine();
            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("public static ").Append(classToProcess.ClassSymbol.Name)
                    // .Append(" Instance { get; private set; }")
                    .Append(" Instance;")
                    .AppendLine();
                builder.AppendLine();
                builder.AppendIdent().Append("private void ").Append(classToProcess.MethodName).Append("()").AppendLine();
                using (new BracketsBlock(builder))
                {
                    // builder.AppendLineWithIdent("if (Instance != null && Instance != this)");
                    // using (new BracketsBlock(builder))
                    // {
                    //     builder.AppendLineWithIdent("Destroy(this);");
                    // }
                    // builder.AppendLineWithIdent("else");
                    // using (new BracketsBlock(builder))
                    // {
                        builder.AppendLineWithIdent("Instance = this;");
                    // }
                }
            }
        }

        return builder.ToString();
    }
}