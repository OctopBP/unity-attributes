using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;

namespace UnityAttributes.EnumValuesList;

[Generator]
public sealed class EnumValuesListGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .SelectMany(static (array, _) => array)
            .Collect()
            .SelectMany(static (array, _) => array);

        context.RegisterPostInitializationOutput(i => i.AddSource(
            $"{EnumValuesListAttribute.AttributeFullName}.g", EnumValuesListAttribute.AttributeText));
        
        context.RegisterSourceOutput(enums, GenerateCode);
    }

    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is EnumDeclarationSyntax;
    }
    
    private static List<EnumToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx,
        CancellationToken token)
    {
        var enumDeclarationSyntax = (EnumDeclarationSyntax) ctx.Node;

        var enumDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(enumDeclarationSyntax, token);
        if (enumDeclarationSymbol is not ITypeSymbol enumDeclarationTypeSymbol)
        {
            return [];
        }

        var enumNamespace = enumDeclarationTypeSymbol.GetNamespace();
        
        var membersToProcess = new List<EnumMemberToProcess>();
        foreach (var enumMemberDeclarationSyntax in enumDeclarationSyntax.Members)
        { 
            membersToProcess.Add(new EnumMemberToProcess(enumMemberDeclarationSyntax.Identifier.Text));
        }

        if (!enumDeclarationSyntax.HaveAttribute(EnumValuesListAttribute.AttributeName))
        {
            return [];
        }
        
        var list = new List<EnumToProcess>
        {
            new EnumToProcess(enumDeclarationTypeSymbol, membersToProcess, enumNamespace)
        };

        return list;
    }

    private static void GenerateCode(SourceProductionContext context, EnumToProcess enumToProcess)
    {
        var code = GenerateCode(enumToProcess);
        context.AddSource($"{enumToProcess.EnumSymbol.ToDisplayString()}_list.g",
            SourceText.From(code, Encoding.UTF8));
    }

    private static string GenerateCode(EnumToProcess enumToProcess)
    {
        var builder = new CodeBuilder();
        
        var isVisible = enumToProcess.EnumSymbol.IsVisibleOutsideOfAssembly();
        var methodVisibility = isVisible ? "public" : "internal";
        
        
        builder.AppendLine("/// <auto-generated />").AppendLine();
        
        if (!string.IsNullOrEmpty(enumToProcess.FullNamespace))
        {
            builder.Append("namespace ").Append(enumToProcess.FullNamespace!).AppendLine();
            builder.OpenBrackets();
        }
        
        builder.AppendIdent().Append(methodVisibility).Append(" static partial class ")
            .Append(enumToProcess.EnumSymbol.Name).AppendLine("Ext");
        builder.OpenBrackets();

        builder.AppendIdent().Append("public static ").Append(enumToProcess.FullCsharpName).AppendLine("[] Values =");
        builder.OpenBrackets();
        foreach (var member in enumToProcess.Members)
        {
            builder.AppendIdent().Append(enumToProcess.FullCsharpName).Append(".").Append(member.Name).AppendLine(",");
        }
        builder.DecreaseIdent().AppendLineWithIdent("};");
        
        builder.CloseBrackets();

        if (!string.IsNullOrEmpty(enumToProcess.FullNamespace))
        {
            builder.CloseBrackets();
        }

        return builder.ToString();
    }
}