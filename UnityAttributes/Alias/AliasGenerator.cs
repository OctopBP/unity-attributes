using System.Collections.Generic;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using SourceGeneration.Utils.CodeAnalysisExtensions;
using SourceGeneration.Utils.CodeBuilder;
using SourceGeneration.Utils.Common;

namespace UnityAttributes.Alias; 

[Generator]
public class AliasGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var enums = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsSyntaxTargetForGeneration(node),
                transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext, token))
            .Collect()
            .SelectMany(static (array, _) => array.Collect());

        context.RegisterPostInitializationOutput(i => i.AddSource($"{AliasAttribute.AttributeFullName}.g", AliasAttribute.AttributeText));
        
        context.RegisterSourceOutput(enums, GenerateCode!);
    }
    
    private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
    {
        return node is ClassDeclarationSyntax;
    }

    private static Optional<ClassToProcess> GetSemanticTargetForGeneration(GeneratorSyntaxContext ctx, CancellationToken token)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax) ctx.Node;
        if (!classDeclarationSyntax.HaveAttribute(AliasAttribute.AttributeName))
        {
            return OptionalExt.None<ClassToProcess>();
        }
        
        var classDeclarationSymbol = ctx.SemanticModel.GetDeclaredSymbol(classDeclarationSyntax, token);
        if (classDeclarationSymbol is not ITypeSymbol classTypeSymbol)
        {
            return OptionalExt.None<ClassToProcess>();
        }
        
        var fieldToProcess = new List<IFieldSymbol>();
        foreach (var classMemberDeclarationSyntax in classDeclarationSyntax.Members)
        { 
            if (classMemberDeclarationSyntax is not FieldDeclarationSyntax fieldDeclarationSyntax)
            {
                continue;
            }
            
            foreach (var variable in fieldDeclarationSyntax.Declaration.Variables)
            {
                if (ctx.SemanticModel.GetDeclaredSymbol(variable) is IFieldSymbol fieldSymbol)
                {
                    fieldToProcess.Add(fieldSymbol);
                }
            }
        }

        if (fieldToProcess.Count == 0)
        {
            return OptionalExt.None<ClassToProcess>();
        }
            
        return new ClassToProcess(classTypeSymbol, fieldToProcess);
    }
    
    private static void GenerateCode(SourceProductionContext context, ClassToProcess classToProcess)
    {
        var code = GenerateCode(classToProcess);
        context.AddSource($"{classToProcess.FullCsharpName}.g", SourceText.From(code, Encoding.UTF8));
    }

    private static string GenerateCode(ClassToProcess classToProcess)
    {
        var className = classToProcess.ClassSymbol.Name;
        var builder = new CodeBuilder();

        builder.AppendLineWithIdent(Const.AutoGeneratedText);
        builder.AppendLine();

        using (new NamespaceBlock(builder, classToProcess.ClassSymbol))
        {
            using (new ParentsBlock(builder, classToProcess.ClassSymbol))
            {
                builder.AppendIdent().Append("public partial class ").AppendLine(className);
                using (new BracketsBlock(builder))
                {
                    AddEmptyConstructor();
                    AddConstructor();
                    AddToString();
                    AddGetHashCode();
                    AddEquals();
                    AddEqualsObject();
                    AddEqualOperator();
                    AddNotEqualOperator();
                }
            }
        }
        
        return builder.ToString();

        void AddEmptyConstructor()
        {
            builder.AppendIdent().Append("public ").Append(className).AppendLine("() { }");
        }

        void AddConstructor()
        {
            builder.AppendLine();
            builder.AppendIdent().Append("public ").Append(className).Append("(");
            builder.AppendArray(
                classToProcess.Fields.ToArray(),
                (f, b) => b.Append(f.Type.ToString()).Append(" ")
                    .Append(f.Name.RemoveUnderlineAndFirstCharToLower()),
                b => b.Append(", ")
            );
            builder.AppendLine(")");
            using (new BracketsBlock(builder))
            {
                foreach (var fieldSymbol in classToProcess.Fields)
                {
                    var fieldName = fieldSymbol.Name;
                    builder.AppendIdent().Append("this.").Append(fieldName).Append(" = ")
                        .Append(fieldName.RemoveUnderlineAndFirstCharToLower()).AppendLine(";");
                }
            }
        }

        void AddToString()
        {
            builder.AppendLine();
            builder.AppendIdent()
                .Append("public override string ToString() => \"").Append(className).Append("(")
                .AppendArray(
                    classToProcess.Fields.ToArray(),
                    (f, b) => b.Append(f.Name).Append(": \" + ").Append(f.Name),
                    b => b.Append(" + \", ")
                )
                .Append(" + \")\";").AppendLine();
        }

        void AddGetHashCode()
        {
            builder.AppendLine();
            builder.AppendLineWithIdent("public override int GetHashCode()");
            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("unchecked");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("var hashCode = 0;");
                    foreach (var field in classToProcess.Fields)
                    {
                        builder.AppendIdent().Append("hashCode = (hashCode * 397) ^ ").Append(field.Name).Append(".GetHashCode();").AppendLine();
                    }
                    builder.AppendLineWithIdent("return hashCode;");
                }
            }
        }

        void AddEquals()
        {
            builder.AppendLine();
            builder.AppendIdent().Append("public bool Equals(").Append(className).Append(" other)").AppendLine();
            using (new BracketsBlock(builder))
            {
                builder.AppendIdent().Append("return ").AppendArray(classToProcess.Fields.ToArray(), (f, b) => b.Append(f.Name).Append(".Equals(other.").Append(f.Name).Append(")"), b => b.Append(" && ")).Append(";").AppendLine();
            }
        }

        void AddEqualsObject()
        {
            builder.AppendLine();
            builder.AppendLineWithIdent("public override bool Equals(object obj)");
            using (new BracketsBlock(builder))
            {
                builder.AppendLineWithIdent("if (ReferenceEquals(null, obj))");
                using (new BracketsBlock(builder))
                {
                    builder.AppendLineWithIdent("return false;");
                }

                builder.AppendIdent().Append("return obj is ").Append(className).Append(" && Equals((")
                    .Append(className).Append(") obj);").AppendLine();
            }
        }

        void AddEqualOperator()
        {
            builder.AppendLine();
            builder.AppendIdent().Append("public static bool operator ==(").Append(className).Append(" left, ")
                .Append(className).Append(" right) => left.Equals(right);").AppendLine();
        }

        void AddNotEqualOperator()
        {
            builder.AppendLine();
            builder.AppendIdent().Append("public static bool operator !=(").Append(className).Append(" left, ")
                .Append(className).Append(" right) => !left.Equals(right);").AppendLine();
        }
    }
}
