//HintName: TestClass.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

public partial class TestClass
{
    public TestClass() { }

    public TestClass(int intValue, SomeEnum enumValue, Test classValue)
    {
        this._intValue = intValue;
        this._enumValue = enumValue;
        this._classValue = classValue;
    }

    public override string ToString() => "TestClass(_intValue: " + _intValue + ", _enumValue: " + _enumValue + ", _classValue: " + _classValue + ")";

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode = 0;
            hashCode = (hashCode * 397) ^ _intValue.GetHashCode();
            hashCode = (hashCode * 397) ^ _enumValue.GetHashCode();
            hashCode = (hashCode * 397) ^ _classValue.GetHashCode();
            return hashCode;
        }
    }

    public bool Equals(TestClass other)
    {
        return _intValue.Equals(other._intValue) && _enumValue.Equals(other._enumValue) && _classValue.Equals(other._classValue);
    }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }
        return obj is TestClass && Equals((TestClass) obj);
    }

    public static bool operator ==(TestClass left, TestClass right) => left.Equals(right);

    public static bool operator !=(TestClass left, TestClass right) => !left.Equals(right);
}
